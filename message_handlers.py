from config import DEV_CHAT_ID, BANLIST
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from astrobot import bot, dp
from markups import main_kbd, location_kbd
from geo_api import get_geodata
from weather_api import fetch_current_weather, fetch_forecast, ru_month
from astro_api import get_astro_data
from nasa_api import get_apod
from db import get_users, get_user, update_user, get_uid, ban_user, unban_user, get_banned

import lat_lon_parser
from datetime import datetime, timedelta


class PlaceNameFSM(StatesGroup):
    namestring = State()


class TimeFSM(StatesGroup):
    time_needed = State()


async def start_cmd(message: types.Message):
    msg = "–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∞—Å—Ç—Ä–æ–Ω–æ–º–∞-–ª—é–±–∏—Ç–µ–ª—è.\n\n–Ø —É–º–µ—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ –æ–±—ä–µ–∫—Ç—ã —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã," \
          " –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω—è —Å–µ–π—á–∞—Å, –±–ª–∏–∂–∞–π—à–µ–π –Ω–æ—á—å—é (–≤–µ—á–µ—Ä–æ–º —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ –∑–∞–∫–∞—Ç–∞, –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –Ω–æ—á–∏, –∏ —É—Ç—Ä–æ–º" \
          " –∑–∞ —á–∞—Å –¥–æ –≤–æ—Å—Ö–æ–¥–∞), –ª–∏–±–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É - –∑–∞–¥–∞–π—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è.\n\n" \
          "PS: –ê –µ—â–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É)\n\nPPS: –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ-—á—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É " \
          "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±–∞–≥—É –∏–∑–ª–æ–≤–∏–ª–∏) - –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±—É–∫–≤ DEV"
    await bot.send_message(message.from_user.id, msg, reply_markup=main_kbd) #  reply_markup=kb_client,


async def place_cmd(message: types.Message):
    """Choose location menu"""
    userinfo = await get_user(message.from_user.id)
    if userinfo:
        place = f"\n({userinfo[3]})" if userinfo[3] else ""
        header = f'–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n–®–∏—Ä–æ—Ç–∞ {userinfo[1]}, –î–æ–ª–≥–æ—Ç–∞ {userinfo[2]}{place}\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å'
    else:
        header = '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å'
    msg = f'{header} –µ–≥–æ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ —Å–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.'
    await bot.send_message(message.from_user.id, msg, reply_markup=location_kbd)


async def cancel(message: types.Message):
    """Cancels location choosing, returns main keyboard"""
    await bot.send_message(message.from_user.id, '–æ–∫', reply_markup=main_kbd)


async def catch_location(message: types.Message):
    """Procces location data from user device"""
    lat = message.location.latitude
    lon = message.location.longitude
    try:
        username = message.from_user['username']
    except KeyError:
        username = ''
    await update_user(message.from_user.id, str(lat), str(lon), name=username)
    reply = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–æ—Ä–¥–∏—Ç–Ω–∞—Ç—ã:\n–®–∏—Ä–æ—Ç–∞ {lat}\n–î–æ–ª–≥–æ—Ç–∞ {lon}"
    await message.answer(reply, reply_markup=main_kbd)


async def prepare_latlon_input(message: types.Message):
    await PlaceNameFSM.namestring.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º:')


async def input_latlon(message: types.Message, state=FSMContext):
    """Parces inputed location"""
    result = await get_geodata(message.text)
    try:
        username = message.from_user['username']
    except KeyError:
        username = ''

    if all(result):
        reply = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n{result[0]}\n–®–∏—Ä–æ—Ç–∞ {result[1]}\n–î–æ–ª–≥–æ—Ç–∞ {result[2]}"
        await update_user(message.from_user.id, result[1], result[2], result[0], username)
        await message.reply(reply, reply_markup=main_kbd)
    else:
        msg = message.text.split()
        part1, part2 = ' '.join(msg[:len(msg)//2]), ' '.join(msg[len(msg)//2:])
        try:
            lat = lat_lon_parser.parse(part1)
            lon = lat_lon_parser.parse(part2)
            await update_user(message.from_user.id, lat, lon, username)
            reply = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n–®–∏—Ä–æ—Ç–∞ {lat}\n–î–æ–ª–≥–æ—Ç–∞ {lon}"
        except ValueError:
            reply = 'ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é!'
        await message.reply(reply, reply_markup=location_kbd)
    await state.finish()


async def get_curr_weather(message):
    """Gets current weather and local time from api"""
    userdata = await get_user(message.from_user.id)
    if userdata and all(userdata[:3]):  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–æ
        sunset, sunrise, localnow, msg = await fetch_current_weather(userdata[1], userdata[2])
        return sunset, sunrise, localnow, msg, userdata
    else:
        await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', reply_markup=location_kbd)
        return None, None, None, None, None


async def send_status_init(message, userdata, obs_time):
    """Sends first message in bot's main response"""
    name = f", ({userdata[3]})" if userdata[3] else ''
    date = f"{obs_time.strftime('%d')} {ru_month[obs_time.strftime('%m')]} {obs_time.strftime('%Y')}"
    await message.answer(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è: {userdata[1]}, {userdata[2]}{name}\n{date} –≤ {obs_time.strftime('%H:%M')}", reply_markup=main_kbd)


async def status_now(message: types.Message):
    """Sends 2 messages: current weather and solar system objects visible now"""
    sunset, sunrise, obs_time, weather_msg, userdata = await get_curr_weather(message)
    if weather_msg:
        await send_status_init(message, userdata, obs_time)
        await message.answer(weather_msg, reply_markup=main_kbd)
        solar_sys = await get_astro_data(lat=userdata[1], lon=userdata[2], obs_time=obs_time)
        await message.answer(solar_sys, reply_markup=main_kbd)


async def status_evening(message: types.Message):
    """Sends 2 messages: weather at the start of night and solar system objects visible at that time"""
    sunset, sunrise, localnow, _, userdata = await get_curr_weather(message)
    if sunset:
        obs_time = sunset + timedelta(hours=1)
        if localnow - timedelta(hours=3) > obs_time:
            obs_time += timedelta(days=1)
        await send_status_init(message, userdata, obs_time)
        forecast_msg = await fetch_forecast(userdata[1], userdata[2], obs_time)
        try:
            await message.answer(forecast_msg, reply_markup=main_kbd)
        except Exception as ex:
            print(ex)
        solar_sys = await get_astro_data(lat=userdata[1], lon=userdata[2], obs_time=obs_time)
        await message.answer(solar_sys, reply_markup=main_kbd)


async def status_midnight(message: types.Message):
    """Sends 2 messages: weather at midnight and solar system objects visible at that time"""
    sunset, sunrise, localnow, _, userdata = await get_curr_weather(message)
    if sunset:
        sunset_h = int(sunset.strftime("%H"))
        sunset_m = int(sunset.strftime("%M"))
        sunrise_h = int(sunrise.strftime("%H"))
        sunrise_m = int(sunrise.strftime("%M"))
        delta = ((sunrise_h + 24 - sunset_h) * 60 + sunrise_m - sunset_m) // 2  # –∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç –æ—Ç –∑–∞–∫–∞—Ç–∞ –¥–æ —Å–µ—Ä–µ–¥–∏–Ω—ã –Ω–æ—á–∏
        obs_time = sunset + timedelta(minutes=delta)
        if localnow - timedelta(hours=3) > obs_time:
            obs_time += timedelta(days=1)
        await send_status_init(message, userdata, obs_time)
        forecast_msg = await fetch_forecast(userdata[1], userdata[2], obs_time)
        await message.answer(forecast_msg, reply_markup=main_kbd)
        solar_sys = await get_astro_data(lat=userdata[1], lon=userdata[2], obs_time=obs_time)
        await message.answer(solar_sys, reply_markup=main_kbd)


async def status_morning(message: types.Message):
    """Sends 2 messages: weather at the end of night and solar system objects visible at that time"""
    sunset, sunrise, localnow, _, userdata = await get_curr_weather(message)
    if sunrise:
        obs_time = sunrise - timedelta(hours=1)
        if localnow - timedelta(hours=3) > obs_time:
            obs_time += timedelta(days=1)
        await send_status_init(message, userdata, obs_time)
        forecast_msg = await fetch_forecast(userdata[1], userdata[2], obs_time)
        await message.answer(forecast_msg, reply_markup=main_kbd)
        solar_sys = await get_astro_data(lat=userdata[1], lon=userdata[2], obs_time=obs_time)
        await message.answer(solar_sys, reply_markup=main_kbd)


async def prepare_time_input(message: types.Message):
    await TimeFSM.time_needed.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î –ú–ú –ì–ì–ì–ì –ß–ß –º–º"\n(–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç)')


async def input_time(message: types.Message, state=FSMContext):
    """Parse time input and sends sends message with solar system objects visible at that time"""
    await state.finish()
    try:
        obs_time = datetime.strptime(message.text.strip(), "%d %m %Y %H %M")
        await message.answer(obs_time)

        sunset, sunrise, localnow, weather_msg, userdata = await get_curr_weather(message)
        if weather_msg:
            await send_status_init(message, userdata, obs_time)
            solar_sys = await get_astro_data(lat=userdata[1], lon=userdata[2], obs_time=obs_time)
            await message.answer(solar_sys, reply_markup=main_kbd)
    except Exception as ex:
        print(f'–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: {ex}')
        await message.answer('ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é!')
        return


async def show_apod(message: types.Message):
    """Sends link to astronomy picture of the day"""
    title, apod_url = await get_apod()
    await message.answer(f"{apod_url}\n{title}")


async def contact_dev(message: types.Message):
    """Forwards user's message to developer"""
    await message.reply(f"–û–∫, —è –ø–µ—Ä–µ–¥–∞–º")
    await message.forward(chat_id=DEV_CHAT_ID)
    
    
async def admin(message: types.Message):
    """Parce admin commands"""
    global BANLIST
    msg = message.text.split()
    if msg[0] == 'SEND':
        if msg[1].startswith('@'):
            uid = await get_uid(msg[1][1:])
            if uid:
                await bot.send_message(chat_id=uid, text=f"{' '.join(msg[2:])}")
                await message.reply('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
            else:
                await message.reply('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    elif msg[0] == 'BAN' and msg[1].startswith('@'):
        uid = await get_uid(msg[1][1:])
        if uid and uid != DEV_CHAT_ID:
            await ban_user(uid)
            BANLIST = await get_banned()
            await message.reply(f"{msg[1]} –∑–∞–±–∞–Ω–µ–Ω")
        else:
            await message.reply(f"{msg[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    elif msg[0] == 'UNBAN' and msg[1].startswith('@'):
        uid = await get_uid(msg[1][1:])
        if uid:
            await unban_user(uid)
            BANLIST = await get_banned()
            await message.reply(f"{msg[1]} —Ä–∞–∑–±–∞–Ω–µ–Ω")
        else:
            await message.reply(f"{msg[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def ban(message: types.Message):
    pass


async def test(message: types.Message):
    """Sandbox"""
    result = await get_user(message.from_user.id)
    print(result)
    apod_url = await get_apod()
    apod_url+= '\n–∞–±—Ä–∞–∫–∞–¥–∞–±—Ä–∞'
    await message.answer(apod_url)
