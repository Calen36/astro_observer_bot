import json
from datetime import datetime
import aiohttp
import base64
import lat_lon_parser
from config import *

api_url = 'https://api.astronomyapi.com/api/v2/bodies/positions'
auth_hash = base64.b64encode(f"{ASTRO_APP_ID}:{ASTRO_SECRET}".encode('utf-8')).decode('utf-8')

ru_obj_names = {'Moon': '–õ—É–Ω–∞', 'Sun': '–°–æ–ª–Ω—Ü–µ', 'Mercury': '–ú–µ—Ä–∫—É—Ä–∏–π', 'Venus': '–í–µ–Ω–µ—Ä–∞', 'Mars': '–ú–∞—Ä—Å',
                'Jupiter': '–Æ–ø–∏—Ç–µ—Ä', 'Saturn': '–°–∞—Ç—É—Ä–Ω', 'Uranus': '–£—Ä–∞–Ω', 'Neptune': '–ù–µ–ø—Ç—É–Ω', 'Pluto': '–ü–ª—É—Ç–æ–Ω',
                'Earth': '–ó–µ–º–ª—è'}

ru_phases = {'New Moon': 'üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ', 'Waxing Crescent': 'üåí –ú–æ–ª–æ–¥–∞—è –ª—É–Ω–∞', 'First Quarter': 'üåì –ü–µ—Ä–≤–∞—è –ß–µ—Ç–≤–µ—Ä—Ç—å',
             'Waxing Gibbous': 'üåî –ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞', 'Full Moon': 'üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', 'Waning Gibbous': 'üåñ –£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞',
             'Last Quarter': 'üåó –ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å', 'Waning Crescent': 'üåò –°—Ç–∞—Ä–∞—è –ª—É–Ω–∞'}

ru_constellations = {'and': '–ê–Ω–¥—Ä–æ–º–µ–¥–∞', 'gem': '–ë–ª–∏–∑–Ω–µ—Ü—ã', 'uma': '–ë–æ–ª—å—à–∞—è –ú–µ–¥–≤–µ–¥–∏—Ü–∞', 'cma': '–ë–æ–ª—å—à–æ–π –ü—ë—Å',
                     'lib': '–í–µ—Å—ã', 'aqr': '–í–æ–¥–æ–ª–µ–π', 'aur': '–í–æ–∑–Ω–∏—á–∏–π', 'lup': '–í–æ–ª–∫', 'boo': '–í–æ–ª–æ–ø–∞—Å',
                     'com': '–í–æ–ª–æ—Å—ã –í–µ—Ä–æ–Ω–∏–∫–∏', 'crv': '–í–æ—Ä–æ–Ω', 'her': '–ì–µ—Ä–∫—É–ª–µ—Å', 'hya': '–ì–∏–¥—Ä–∞', 'col': '–ì–æ–ª—É–±—å',
                     'cvn': '–ì–æ–Ω—á–∏–µ –ü—Å—ã', 'vir': '–î–µ–≤–∞', 'del': '–î–µ–ª—å—Ñ–∏–Ω', 'dra': '–î—Ä–∞–∫–æ–Ω', 'mon': '–ï–¥–∏–Ω–æ—Ä–æ–≥',
                     'ara': '–ñ–µ—Ä—Ç–≤–µ–Ω–Ω–∏–∫', 'pic': '–ñ–∏–≤–æ–ø–∏—Å–µ—Ü', 'cam': '–ñ–∏—Ä–∞—Ñ', 'gru': '–ñ—É—Ä–∞–≤–ª—å', 'lep': '–ó–∞—è—Ü',
                     'oph': '–ó–º–µ–µ–Ω–æ—Å–µ—Ü', 'ser': '–ó–º–µ—è', 'dor': '–ó–æ–ª–æ—Ç–∞—è –†—ã–±–∞', 'ind': '–ò–Ω–¥–µ–µ—Ü', 'cas': '–ö–∞—Å—Å–∏–æ–ø–µ—è',
                     'car': '–ö–∏–ª—å', 'cet': '–ö–∏—Ç', 'cap': '–ö–æ–∑–µ—Ä–æ–≥', 'pyx': '–ö–æ–º–ø–∞—Å', 'pup': '–ö–æ—Ä–º–∞', 'cyg': '–õ–µ–±–µ–¥—å',
                     'leo': '–õ–µ–≤', 'vol': '–õ–µ—Ç—É—á–∞—è –†—ã–±–∞', 'lyr': '–õ–∏—Ä–∞', 'vul': '–õ–∏—Å–∏—á–∫–∞', 'umi': '–ú–∞–ª–∞—è –ú–µ–¥–≤–µ–¥–∏—Ü–∞',
                     'equ': '–ú–∞–ª—ã–π –ö–æ–Ω—å', 'lmi': '–ú–∞–ª—ã–π –õ–µ–≤', 'cmi': '–ú–∞–ª—ã–π –ü—ë—Å', 'mic': '–ú–∏–∫—Ä–æ—Å–∫–æ–ø', 'mus': '–ú—É—Ö–∞',
                     'ant': '–ù–∞—Å–æ—Å', 'nor': '–ù–∞—É–≥–æ–ª—å–Ω–∏–∫', 'ari': '–û–≤–µ–Ω', 'oct': '–û–∫—Ç–∞–Ω—Ç', 'aql': '–û—Ä—ë–ª', 'ori': '–û—Ä–∏–æ–Ω',
                     'pav': '–ü–∞–≤–ª–∏–Ω', 'vel': '–ü–∞—Ä—É—Å–∞', 'peg': '–ü–µ–≥–∞—Å', 'per': '–ü–µ—Ä—Å–µ–π', 'for': '–ü–µ—á—å',
                     'aps': '–†–∞–π—Å–∫–∞—è –ü—Ç–∏—Ü–∞', 'cnc': '–†–∞–∫', 'cae': '–†–µ–∑–µ—Ü', 'psc': '–†—ã–±—ã', 'lyn': '–†—ã—Å—å',
                     'crb': '–°–µ–≤–µ—Ä–Ω–∞—è –ö–æ—Ä–æ–Ω–∞', 'sex': '–°–µ–∫—Å—Ç–∞–Ω—Ç', 'ret': '–°–µ—Ç–∫–∞', 'sco': '–°–∫–æ—Ä–ø–∏–æ–Ω', 'scl': '–°–∫—É–ª—å–ø—Ç–æ—Ä',
                     'men': '–°—Ç–æ–ª–æ–≤–∞—è –ì–æ—Ä–∞', 'sge': '–°—Ç—Ä–µ–ª–∞', 'sgr': '–°—Ç—Ä–µ–ª–µ—Ü', 'tel': '–¢–µ–ª–µ—Å–∫–æ–ø', 'tau': '–¢–µ–ª–µ—Ü',
                     'tri': '–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫', 'tuc': '–¢—É–∫–∞–Ω', 'phe': '–§–µ–Ω–∏–∫—Å', 'cha': '–•–∞–º–µ–ª–µ–æ–Ω', 'cen': '–¶–µ–Ω—Ç–∞–≤—Ä',
                     'cep': '–¶–µ—Ñ–µ–π', 'cir': '–¶–∏—Ä–∫—É–ª—å', 'hor': '–ß–∞—Å—ã', 'crt': '–ß–∞—à–∞', 'sct': '–©–∏—Ç', 'eri': '–≠—Ä–∏–¥–∞–Ω',
                     'hyi': '–Æ–∂–Ω–∞—è –ì–∏–¥—Ä–∞', 'cra': '–Æ–∂–Ω–∞—è –ö–æ—Ä–æ–Ω–∞', 'psa': '–Æ–∂–Ω–∞—è –†—ã–±–∞', 'cru': '–Æ–∂–Ω—ã–π –ö—Ä–µ—Å—Ç',
                     'tra': '–Æ–∂–Ω—ã–π –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫', 'lac': '–Ø—â–µ—Ä–∏—Ü–∞'}


def direction(angle):
    deg = int(angle.split('¬∞')[0])
    for diection in ((22.5, "—Å–µ–≤–µ—Ä–µ"), (67.5, "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫–µ"), (112.5, "–≤–æ—Å—Ç–æ–∫–µ"), (157.5, "—é–≥–æ-–≤–æ—Å—Ç–æ–∫–µ"),
                     (202.5, "—é–≥–µ"), (247.50, "—é–≥–æ-–∑–∞–ø–∞–¥–µ"), (292.50, "–∑–∞–ø–∞–¥–µ"), (337.50, "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–µ")):
        if deg <= diection[0]:
            return diection[1]
    return "—Å–µ–≤–µ—Ä–µ"


async def get_astro_data(lat, lon, obs_time):
    params = {
        'longitude': lon,
        'latitude': lat,
        'elevation': '227',
        'from_date': obs_time.strftime("%Y-%m-%d"),
        'to_date': obs_time.strftime("%Y-%m-%d"),
        'time': obs_time.strftime("%H:%M:%S"),
    }
    headers = {'Authorization': f"Basic {auth_hash}"}

    async with aiohttp.ClientSession() as session:
        async with session.get(api_url, headers=headers, params=params) as resp:
            data = await resp.json()
            # print(json.dumps(data, indent=4))
            return parse_astro_data(data)


def parse_astro_data(data):
    summary = []
    for x in data['data']['table']['rows']:
        planet_name = x['cells'][0]['name']
        elongation = x['cells'][0]['extraInfo']['elongation']
        try:
            magnitude = round(float(x['cells'][0]['extraInfo']['magnitude']), 2)
        except TypeError as ex:
            # print(ex)
            magnitude = None
        constellation = x['cells'][0]['position']['constellation'][
            'id']  # name –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ id –¥–ª—è —Ç—Ä–µ—Ö–±—É–∫–≤–µ–Ω–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π
        r_ascention = x['cells'][0]['position']['equatorial']['rightAscension']['string']  # or hours
        declination = x['cells'][0]['position']['equatorial']['declination']['string']  # or degrees
        altitude = x['cells'][0]['position']['horizonal']['altitude']['string']  # or degrees
        azimuth = x['cells'][0]['position']['horizonal']['azimuth']['string']  # or degrees

        list_item = f"{ru_obj_names[planet_name].upper()}\n"
        if planet_name == 'Moon':
            phase = ru_phases[x['cells'][0]['extraInfo']['phase']['string']]
            list_item += f"{phase}\n"
        list_item += f"–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ–∑–≤–µ–∑–¥–∏–∏ {ru_constellations[constellation]} –∏ –∏–º–µ–µ—Ç —è—Ä–∫–æ—Å—Ç—å {magnitude} –∑.–≤.\n" \
            f"–≤—ã—Å–æ—Ç–∞ –Ω–∞–¥ –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–º {altitude}\n" \
            f"–∞–∑–∏–º—É—Ç {azimuth} (–Ω–∞ {direction(azimuth)})\n"

        if planet_name in ('Mercury', 'Venus'):
            list_item += f"—ç–ª–æ–Ω–≥–∞—Ü–∏—è {round(float(elongation), 1)}¬∞\n"
        # list_item += f"–ø—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ {r_ascention}\nc–∫–ª–æ–Ω–µ–Ω–∏–µ {declination}\n"
        if lat_lon_parser.parse(altitude) > 5:
            summary.append(list_item)
    return '\n'.join(summary)
